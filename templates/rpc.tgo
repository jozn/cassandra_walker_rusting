package x

import (
    "strings"
    "github.com/golang/protobuf/proto"
    "errors"
    "ms/sun/shared/config"
    "log"
)

type RPC_UserParam interface {
    GetUserId() int
    IsUser() bool
}

type RPC_ResponseHandlerInterface interface {
    //HandleOfflineResult(dataPB interface{},PBClass string,RpcName string,cmd PB_CommandToServer,p RPC_UserParam, paramParsed interface{})
    HandleOfflineResult(resOut RpcResponseOutput)
    IsUserOnlineResult(interface{}, error)
    HandelError(error)
}

type RpcResponseOutput struct {
    UserParam       RPC_UserParam
    ResponseData    interface{}
    PBClassName     string
    RpcName         string
    CommandToServer PB_CommandToServer
    RpcParamPassed  interface{}
}

var RPC_ResponseHandler RPC_ResponseHandlerInterface

//note: rpc methods cant have equal name they must be different even in different rpc services
type RPC_AllHandlersInteract struct {
{{range .Services}}
   {{.Name}} {{.Name}}
{{- end}}
}

/////////////// Interfaces ////////////////
{{range .Services}}
type {{.Name}} interface {
{{- range .Methods}}
    {{.MethodName}}(param *{{.InTypeName}}, userParam RPC_UserParam ) (res {{.OutTypeName}} ,err error)
{{- end}}
}
{{end}}

func noDevErr(err error)  {
    if config.IS_DEBUG && err != nil {
        log.Panic(err)
    }
}

type rpcParamHandler struct {
    cmd PB_CommandToServer
    params RPC_UserParam
    rpcHandler RPC_AllHandlersInteract
    responseHandler RPC_ResponseHandlerInterface
}

//todo: this method can be outputed from x package
////////////// map of rpc methods to all
func HandleRpcs(cmd PB_CommandToServer, params RPC_UserParam, rpcHandler RPC_AllHandlersInteract,responseHandler RPC_ResponseHandlerInterface) {

    fn,ok := mpRpcMethods[cmd.Command]
    if !ok {
        if config.IS_DEBUG {
            log.Panic("HandleRpcs:  command not registerd for ", cmd.Command)
        }
    }
    
    p := rpcParamHandler{
		cmd:             cmd,
		params:          params,
		rpcHandler:      rpcHandler,
		responseHandler: responseHandler,
	}
	fn(p)
}

var mpRpcMethods = map[string]func(p rpcParamHandler){
    {{range .Services}}
    // rpc: {{.Name}}
    {{ range .Methods}}
    "{{.FullMethodName}}": func(p rpcParamHandler) {
    	if p.rpcHandler.{{.ParentServiceName}} == nil {
            noDevErr(errors.New("rpc service is null for: p.rpcHandler.{{.FullMethodName}}"))
            return
        }
        load := &{{.InTypeName}}{}
        err := proto.Unmarshal(p.cmd.Data, load)
        if err == nil {
            res, err := p.rpcHandler.{{.FullMethodName}}(load,p.params)
            if err == nil {
                out:= RpcResponseOutput{
                    RpcName: "{{.FullMethodName}}",
                    UserParam: p.params,
                    CommandToServer: p.cmd,
                    PBClassName: "{{.OutTypeName}}",
                    ResponseData: &res,
                    RpcParamPassed: load,
                }
                p.responseHandler.HandleOfflineResult(out)
            }else{
                p.responseHandler.HandelError(err)
            }
        }else{
            p.responseHandler.HandelError(err)
        }
    },
    {{- end}}
    {{end}}

}


/////////////// Direct in PB_CommandToClient /////////////
/*
{{range .Services}}
{{$ser := .Name}}
{{- range .Methods}}
 {{$ser}}.{{.MethodName}}
{{- end}}

{{end}}
*/